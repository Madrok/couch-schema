// This file is automatically generated.
// Do not modify.

import { BaseDocument, Model, Schema, Validators } from '../src/index.mjs';
import { Name, INameDoc, NameSchema } from './Name.js'
import { Phone, IPhoneDoc, PhoneSchema } from './Phone.js'
import { upgradePerson } from './upgraders.js';

const doctype__ = "person";

const schema_version__ = 1;


export interface IPersonDoc extends BaseDocument {
	name: INameDoc;
	phone?: IPhoneDoc[];
}

export const PersonSchema = new Schema(schema_version__, upgradePerson, {
	name: NameSchema,
	phone: [PhoneSchema],
});

export class Person extends Model<IPersonDoc>(doctype__) {

	constructor(obj: any = {}) {
		super(PersonSchema, obj);
		if(this._obj.name === undefined)
			this._obj.name = {};
		this._obj.name = new Name(this._obj.name);
		if(!Array.isArray(this._obj.phone)) {
			if(this._obj.phone !== undefined)
				this._obj.phone = [this._obj.phone];
		}
		if(Array.isArray(this._obj.phone)) {
			for(let i=0; i<this._obj.phone.length; i++)
				this._obj.phone[i] = new Phone(this._obj.phone[i]);
		}
	}

	get name(): Name { return this.name }

	get phone(): Phone[] { return this.phone }

	toJSON() {
		let rv = super.toJSON();
		if(this.name !== undefined)
			rv['name'] = this.name.toJSON();
		if(this.phone !== undefined)
			rv['phone'] = this.phone.map(x=>x.toJSON());
		return rv;
	}
}

