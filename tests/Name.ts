// This file is automatically generated.
// Do not modify.

import { BaseDocument, Model, Schema, Validators } from '../src/index.mjs';
import { upgradeName } from './upgraders.js';

const doctype__ = "name";

const schema_version__ = 1;

type fencetitle = 'Mr.'|'Mrs.'|'Miss'|'Ms.'|'Mstr.'|'Dr.';

export interface INameDoc extends BaseDocument {
	title?: fencetitle;
	firstName: string;
	nickName?: string;
	middleName?: string;
	lastName: string;
	suffix?: string;
}

export const NameSchema = new Schema(schema_version__, upgradeName, {
	title: {
		type: 'string',
		values: '"Mr."|"Mrs."|"Miss"|"Ms."|"Mstr."|"Dr."',
		required: false,
	},
	firstName: {
		type: 'string',
		required: true,
		min: 0,
		default: '',
	},
	nickName: {
		type: 'string',
		required: false,
	},
	middleName: {
		type: 'string',
		required: false,
	},
	lastName: {
		type: 'string',
		required: true,
		min: 0,
		default: '',
	},
	suffix: {
		type: 'string',
		required: false,
	},
	fullName: {
		type: 'calculated',
		calculator: '{ return `${this.firstName} ${this.middleName} ${this.lastName} ${this.suffix}`.replace(/  /g," ");}',
		required: true,
	},
	fullCommonName: {
		type: 'calculated',
		calculator: '{ return `${this.nickName} ${this.lastName}`.replace(/  /g," ");}',
		required: true,
	},
	displayName: {
		type: 'calculated',
		calculator: '{ return `${this.firstName} (${this.nickName}) ${this.lastName}`.replace(/  /g," ");}',
		required: true,
	},
	displayFullName: {
		type: 'calculated',
		calculator: '{ return `${this.firstName} (${this.nickName}) ${this.middleName} ${this.lastName}`.replace(/  /g," ");}',
		required: true,
	},
});

export class Name extends Model<INameDoc>(doctype__) {

	constructor(obj: any = {}) {
		super(NameSchema, obj);
	}

	get title(): fencetitle | undefined { return this._obj.title }
	set title(v: fencetitle | undefined) {
		if (v === undefined)
			delete this._obj.title;
		else
			this._obj.title = v;
	}

	get firstName(): string | undefined { return this._obj.firstName }
	set firstName(v: string | undefined) {
		if (v === undefined)
			delete this._obj.firstName;
		else
			this._obj.firstName = v;
	}

	get nickName(): string | undefined { return this._obj.nickName }
	set nickName(v: string | undefined) {
		if (v === undefined)
			delete this._obj.nickName;
		else
			this._obj.nickName = v;
	}

	get middleName(): string | undefined { return this._obj.middleName }
	set middleName(v: string | undefined) {
		if (v === undefined)
			delete this._obj.middleName;
		else
			this._obj.middleName = v;
	}

	get lastName(): string | undefined { return this._obj.lastName }
	set lastName(v: string | undefined) {
		if (v === undefined)
			delete this._obj.lastName;
		else
			this._obj.lastName = v;
	}

	get suffix(): string | undefined { return this._obj.suffix }
	set suffix(v: string | undefined) {
		if (v === undefined)
			delete this._obj.suffix;
		else
			this._obj.suffix = v;
	}

	get fullName(): string { return `${this.firstName} ${this.middleName} ${this.lastName} ${this.suffix}`.replace(/  /g,' ');}

	get fullCommonName(): string { return `${this.nickName} ${this.lastName}`.replace(/  /g,' ');}

	get displayName(): string { return `${this.firstName} (${this.nickName}) ${this.lastName}`.replace(/  /g,' ');}

	get displayFullName(): string { return `${this.firstName} (${this.nickName}) ${this.middleName} ${this.lastName}`.replace(/  /g,' ');}

	toJSON() {
		let rv = super.toJSON();
		if(this.title !== undefined)
			rv['title'] = this.title;
		if(this.firstName !== undefined)
			rv['firstName'] = this.firstName;
		if(this.nickName !== undefined)
			rv['nickName'] = this.nickName;
		if(this.middleName !== undefined)
			rv['middleName'] = this.middleName;
		if(this.lastName !== undefined)
			rv['lastName'] = this.lastName;
		if(this.suffix !== undefined)
			rv['suffix'] = this.suffix;
		return rv;
	}
}

