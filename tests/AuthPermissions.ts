// This file is automatically generated.
// Do not modify.

import { BaseDocument, Model, Schema, Validators } from '../src/index.mjs';
import { upgradeAuthPermissions } from './upgraders.js';

const doctype__ = "authpermissions";

const schema_version__ = 1;


export interface IAuthPermissionsDoc extends BaseDocument {
	access: boolean;
	administrator?: boolean;
	viewContacts?: boolean;
	editContacts?: boolean;
	registrar?: boolean;
	viewReports?: boolean;
	uploadFiles?: boolean;
	editASN?: boolean;
	contactTags?: boolean;
}

export const AuthPermissionsSchema = new Schema(schema_version__, upgradeAuthPermissions, {
	access: {
		type: 'boolean',
		required: true,
		default: false,
	},
	administrator: {
		type: 'boolean',
		required: false,
		default: false,
	},
	viewContacts: {
		type: 'boolean',
		required: false,
		default: false,
	},
	editContacts: {
		type: 'boolean',
		required: false,
		default: false,
	},
	registrar: {
		type: 'boolean',
		required: false,
		default: false,
	},
	viewReports: {
		type: 'boolean',
		required: false,
		default: false,
	},
	uploadFiles: {
		type: 'boolean',
		required: false,
		default: false,
	},
	editASN: {
		type: 'boolean',
		required: false,
		default: false,
	},
	contactTags: {
		type: 'boolean',
		required: false,
		default: false,
	},
});

export class AuthPermissions extends Model<IAuthPermissionsDoc>(doctype__) {

	constructor(obj: any = {}) {
		super(AuthPermissionsSchema, obj);
	}

	get access(): boolean | undefined { return this._obj.access }
	set access(v: boolean | undefined) {
		if (v === undefined)
			delete this._obj.access;
		else
			this._obj.access = v;
	}

	get administrator(): boolean | undefined { return this._obj.administrator }
	set administrator(v: boolean | undefined) {
		if (v === undefined)
			delete this._obj.administrator;
		else
			this._obj.administrator = v;
	}

	get viewContacts(): boolean | undefined { return this._obj.viewContacts }
	set viewContacts(v: boolean | undefined) {
		if (v === undefined)
			delete this._obj.viewContacts;
		else
			this._obj.viewContacts = v;
	}

	get editContacts(): boolean | undefined { return this._obj.editContacts }
	set editContacts(v: boolean | undefined) {
		if (v === undefined)
			delete this._obj.editContacts;
		else
			this._obj.editContacts = v;
	}

	get registrar(): boolean | undefined { return this._obj.registrar }
	set registrar(v: boolean | undefined) {
		if (v === undefined)
			delete this._obj.registrar;
		else
			this._obj.registrar = v;
	}

	get viewReports(): boolean | undefined { return this._obj.viewReports }
	set viewReports(v: boolean | undefined) {
		if (v === undefined)
			delete this._obj.viewReports;
		else
			this._obj.viewReports = v;
	}

	get uploadFiles(): boolean | undefined { return this._obj.uploadFiles }
	set uploadFiles(v: boolean | undefined) {
		if (v === undefined)
			delete this._obj.uploadFiles;
		else
			this._obj.uploadFiles = v;
	}

	get editASN(): boolean | undefined { return this._obj.editASN }
	set editASN(v: boolean | undefined) {
		if (v === undefined)
			delete this._obj.editASN;
		else
			this._obj.editASN = v;
	}

	get contactTags(): boolean | undefined { return this._obj.contactTags }
	set contactTags(v: boolean | undefined) {
		if (v === undefined)
			delete this._obj.contactTags;
		else
			this._obj.contactTags = v;
	}

	toJSON() {
		let rv = super.toJSON();
		if(this.access !== undefined)
			rv['access'] = this.access;
		if(this.administrator !== undefined)
			rv['administrator'] = this.administrator;
		if(this.viewContacts !== undefined)
			rv['viewContacts'] = this.viewContacts;
		if(this.editContacts !== undefined)
			rv['editContacts'] = this.editContacts;
		if(this.registrar !== undefined)
			rv['registrar'] = this.registrar;
		if(this.viewReports !== undefined)
			rv['viewReports'] = this.viewReports;
		if(this.uploadFiles !== undefined)
			rv['uploadFiles'] = this.uploadFiles;
		if(this.editASN !== undefined)
			rv['editASN'] = this.editASN;
		if(this.contactTags !== undefined)
			rv['contactTags'] = this.contactTags;
		return rv;
	}
}

