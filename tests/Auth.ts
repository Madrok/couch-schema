// This file is automatically generated.
// Do not modify.

import { BaseDocument, Model, Schema, Validators } from '../src/index.mjs';
import { AuthPermissions, IAuthPermissionsDoc, AuthPermissionsSchema } from './AuthPermissions.js'
import { upgradeAuth } from './upgraders.js';

const doctype__ = "auth";

const schema_version__ = 1;

type fencegroups = 'admin' | 'registrars' | 'teachers';

export interface IAuthDoc extends BaseDocument {
	name: string;
	password: string;
	username: string;
	email: string;
	provider: string;
	google_id?: string;
	domain?: string;
	avatar?: string;
	permissions: IAuthPermissionsDoc;
	groups: fencegroups[];
}

export const AuthSchema = new Schema(schema_version__, upgradeAuth, {
	name: {
		type: 'string',
		required: true,
		min: 0,
		default: '',
	},
	password: {
		type: 'string',
		validate: (v: String) => v && v.length > 6,
		validateFailMsg: 'Password length must be at least 6 characters',
		required: true,
	},
	username: {
		type: 'string',
		required: true,
		min: 0,
		default: '',
	},
	email: {
		type: 'string',
		validate: Validators.email,
		required: true,
	},
	provider: {
		type: 'string',
		validate: (v:string) => (v === 'google' || v === 'local'),
		validateFailMsg: 'provider must be either "local" or "google"',
		required: true,
	},
	google_id: {
		type: 'string',
		required: false,
	},
	domain: {
		type: 'string',
		required: false,
	},
	avatar: {
		type: 'string',
		required: false,
	},
	permissions: AuthPermissionsSchema,
	groups: [{
		type: 'string',
		values: '"admin" | "registrars" | "teachers"',
		validate: (v:string) => ['teachers', 'admin', 'registrars'].indexOf(v) >= 0,
		validateFailMsg: '"%v%" is not a valid group %S% %s% %t%',
		required: true,
	}],
});

export class Auth extends Model<IAuthDoc>(doctype__) {

	constructor(obj: any = {}) {
		super(AuthSchema, obj);
		if(this._obj.permissions === undefined)
			this._obj.permissions = {};
		this._obj.permissions = new AuthPermissions(this._obj.permissions);
	}

	get name(): string | undefined { return this._obj.name }
	set name(v: string | undefined) {
		if (v === undefined)
			delete this._obj.name;
		else
			this._obj.name = v;
	}

	get password(): string | undefined { return this._obj.password }
	set password(v: string | undefined) {
		if (v === undefined)
			delete this._obj.password;
		else
			this._obj.password = v;
	}

	get username(): string | undefined { return this._obj.username }
	set username(v: string | undefined) {
		if (v === undefined)
			delete this._obj.username;
		else
			this._obj.username = v;
	}

	get email(): string | undefined { return this._obj.email }
	set email(v: string | undefined) {
		if (v === undefined)
			delete this._obj.email;
		else
			this._obj.email = v;
	}

	get provider(): string | undefined { return this._obj.provider }
	set provider(v: string | undefined) {
		if (v === undefined)
			delete this._obj.provider;
		else
			this._obj.provider = v;
	}

	get google_id(): string | undefined { return this._obj.google_id }
	set google_id(v: string | undefined) {
		if (v === undefined)
			delete this._obj.google_id;
		else
			this._obj.google_id = v;
	}

	get domain(): string | undefined { return this._obj.domain }
	set domain(v: string | undefined) {
		if (v === undefined)
			delete this._obj.domain;
		else
			this._obj.domain = v;
	}

	get avatar(): string | undefined { return this._obj.avatar }
	set avatar(v: string | undefined) {
		if (v === undefined)
			delete this._obj.avatar;
		else
			this._obj.avatar = v;
	}

	get permissions(): AuthPermissions { return this.permissions }

	get groups(): fencegroups[] | undefined { return this._obj.groups }
	set groups(v: fencegroups[] | undefined) {
		if (v === undefined)
			delete this._obj.groups;
		else
			this._obj.groups = v;
	}

	toJSON() {
		let rv = super.toJSON();
		if(this.name !== undefined)
			rv['name'] = this.name;
		if(this.password !== undefined)
			rv['password'] = this.password;
		if(this.username !== undefined)
			rv['username'] = this.username;
		if(this.email !== undefined)
			rv['email'] = this.email;
		if(this.provider !== undefined)
			rv['provider'] = this.provider;
		if(this.google_id !== undefined)
			rv['google_id'] = this.google_id;
		if(this.domain !== undefined)
			rv['domain'] = this.domain;
		if(this.avatar !== undefined)
			rv['avatar'] = this.avatar;
		if(this.permissions !== undefined)
			rv['permissions'] = this.permissions.toJSON();
		if(this.groups !== undefined)
			rv['groups'] = this.groups;
		return rv;
	}
}

